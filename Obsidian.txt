# Comentario

Concatenar
"Hola"+ " " + "Mundo"

Operadores Aritméticos

Suma
5+5

Resta
5-5

Multiplicación
5*5

División
12.5 / 4
5/0 >> Error dividir por 0.

División Entera
15 // 5

Exponente
5**3

Módulo: Retorna el resto de la división. Por ejemplo saber si es par o impar un número

5 % 2

ORDEN: PEMDAS
Parentesis
Exponencial
Multiplicación
División
Asuma
Sresta

Operadores logicos
TRUE or FALSE

NOT AND OR  

Operadores relacionales
>
<
<=
>=
!=
==

Operadores de asignación
= 
+=
-=
*=
/=
**=
//=
%=

Sentencias condicionales

temp = 15

if temp <= 0:
	print("Muy frio)
elif temp < 25:
	print("Frio")
else: 
	print("Calor")

Lista:
Estructura de datos utilizada para almacenar múltiples valores en secuencia. 

- Secuencia ordenada de valores
- Puede contener valores de cualquier tipo
- Puede contener valores de distintos tipos
- Cada posición en la lista está asociada a un entero llamado "indice"
- Es mutable, puede ser modificada

[1, 2, 3, 4]
["a", "b", "c"]

lista = [2,"a",4,[32,332,23,44]]

print(lista[3][2]) # 23

Append/Insert: Agregar un elemento. 

1) Al final de la lista: 

<variable de lista>.append(<elemento>)

nums = [1, 2, 3, 4]
nums.append(5)

2) En un índice especifico:

<variable de lista>.insert(<indice>, <elemento>)

nums.insert(0, 6)

Remove: Eliminar un elemento.

<variable de lista>.remove(<elemento>)

a = [1, 2, 3, 4, 5, 4]
a.remove(4)

Resultado: [1, 2, 3, 5, 4]

Si queres remover algun número que no existe, ej 9, da error. 

IN: Encontrar un elemento

<elemento> in <variable lista>

vocales = ["a", "e", "i", "o", "u"]

"a" in vocales #true
"z" in vocales #false

.index(<elemento>): Retorna el indice del primer elemento en la lista. Si no se encuentra el elemento ocurre un error. 

<lista>.index(<elemento>)

vocales = ["a", "e", "i", "o", "u"]
vocales.index("i") # 2
vocales.index("z") # Error

_______________________________________________________________________

Cambiar un elemento en una lista

<lista>[<indice>] = <nuevo valor> 

num = [1,2,3,4]
num [0] = 8 # [8,2,3,4]

Métodos de la listas

<lista>.<metodo>(<parámetros>)

> Count: Cuenta cuantas veces se repite un elemento en una lista
.count(<elemento>) 
 
> Extend: Extiende la lista agregandole elementos de otra lista
.extend(<lista>)
a.extend([8 , 9, 10])

> POP: elimina el ultimo elemento y lo muestra 
.pop()

> Reverse: Da vuelta el orden actual de la lista
.reverse()

> Sort: Ordena la lista en asc o desc
.sort()

Tuplas

Estructura de datos inmutable con una secuencia inmutable

(1, 2, 3, 4)
[0] [1]... 

Características: 

- Secuencia ordenada de valores
- Puede contener valores de cualquier tipo de datos

- Puede contenervalores de distinto tipos de datos

- Cada posición de la tupla se identifica con un índice

- Es inmutable. No puede ser modificada. 

Acceder un elemento

tupla = ("A", "B", "C")

tupla[0] # A

Encontrar un elemento 

<elemento> in <tupla>
"A" in tupla

Encontrar el índice de un elemento en la tupla

<tupla>.index(<elemento>)

Contar cuantas veces aparece un elemento en la tupla 

num = (2, 3, 5, 5)
num.count(5) # 2




____________________________________________________

Documentación: https://docs.python.org/es/3/

Diccionarios: 

> Colección de pares clave - Valor
> Claves únicas e inmutables
> Valores asociados pueden ser de cualquier tipo
> La clave se usa para acceder al valor asociado
> Los pares clave-valor pueden ser modificadosm añadidos y eliminados
> Mutables

{Clave: Valor}

{"A": 45, "B": 30}

### Acceder a un valor

diccionario[clave]

edades = {"Gino": 15, "Nora": 45}

edades["Gino"] #15
edades.get("Gino") #15

### Añadir o modificar

diccionario[clave] = el_nuevo_valor

edades["Talina"] = 67

### Eliminar

del diccionario[clave]

del edades["Gino"]

### Revisar si existe 

elemento in diccionario 
(La clave)

"Gino" in edades #true

### Estructura de control - Ciclos repetitivos

#### For
> Estructura de control que permite ejecutar una o varias líneas de código mútiples veces. 
> Lo usamos cuando sabemos con antelación cuantas veces debemos repetir ciertas instrucciones.
