# Comentario

Concatenar
"Hola"+ " " + "Mundo"

Operadores Aritméticos

Suma
5+5

Resta
5-5

Multiplicación
5*5

División
12.5 / 4
5/0 >> Error dividir por 0.

División Entera
15 // 5

Exponente
5**3

Módulo: Retorna el resto de la división. Por ejemplo saber si es par o impar un número

5 % 2

ORDEN: PEMDAS
Parentesis
Exponencial
Multiplicación
División
Asuma
Sresta

Operadores logicos
TRUE or FALSE

NOT AND OR  

Operadores relacionales
>
<
<=
>=
!=
==

Operadores de asignación
= 
+=
-=
*=
/=
**=
//=
%=

Sentencias condicionales

temp = 15

if temp <= 0:
	print("Muy frio)
elif temp < 25:
	print("Frio")
else: 
	print("Calor")

Lista:
Estructura de datos utilizada para almacenar múltiples valores en secuencia. 

- Secuencia ordenada de valores
- Puede contener valores de cualquier tipo
- Puede contener valores de distintos tipos
- Cada posición en la lista está asociada a un entero llamado "indice"
- Es mutable, puede ser modificada

[1, 2, 3, 4]
["a", "b", "c"]

lista = [2,"a",4,[32,332,23,44]]

print(lista[3][2]) # 23

Append/Insert: Agregar un elemento. 

1) Al final de la lista: 

<variable de lista>.append(<elemento>)

nums = [1, 2, 3, 4]
nums.append(5)

2) En un índice especifico:

<variable de lista>.insert(<indice>, <elemento>)

nums.insert(0, 6)

Remove: Eliminar un elemento.

<variable de lista>.remove(<elemento>)

a = [1, 2, 3, 4, 5, 4]
a.remove(4)

Resultado: [1, 2, 3, 5, 4]

Si queres remover algun número que no existe, ej 9, da error. 

IN: Encontrar un elemento

<elemento> in <variable lista>

vocales = ["a", "e", "i", "o", "u"]

"a" in vocales #true
"z" in vocales #false

.index(<elemento>): Retorna el indice del primer elemento en la lista. Si no se encuentra el elemento ocurre un error. 

<lista>.index(<elemento>)

vocales = ["a", "e", "i", "o", "u"]
vocales.index("i") # 2
vocales.index("z") # Error

_______________________________________________________________________

Cambiar un elemento en una lista

<lista>[<indice>] = <nuevo valor> 

num = [1,2,3,4]
num [0] = 8 # [8,2,3,4]

Métodos de la listas

<lista>.<metodo>(<parámetros>)

> Count: Cuenta cuantas veces se repite un elemento en una lista
.count(<elemento>) 
 
> Extend: Extiende la lista agregandole elementos de otra lista
.extend(<lista>)
a.extend([8 , 9, 10])

> POP: elimina el ultimo elemento y lo muestra 
.pop()

> Reverse: Da vuelta el orden actual de la lista
.reverse()

> Sort: Ordena la lista en asc o desc
.sort()

Tuplas

Estructura de datos inmutable con una secuencia inmutable

(1, 2, 3, 4)
[0] [1]... 

Características: 

- Secuencia ordenada de valores
- Puede contener valores de cualquier tipo de datos

- Puede contenervalores de distinto tipos de datos

- Cada posición de la tupla se identifica con un índice

- Es inmutable. No puede ser modificada. 

Acceder un elemento

tupla = ("A", "B", "C")

tupla[0] # A

Encontrar un elemento 

<elemento> in <tupla>
"A" in tupla

Encontrar el índice de un elemento en la tupla

<tupla>.index(<elemento>)

Contar cuantas veces aparece un elemento en la tupla 

num = (2, 3, 5, 5)
num.count(5) # 2




____________________________________________________

Documentación: https://docs.python.org/es/3/

Diccionarios: 

> Colección de pares clave - Valor
> Claves únicas e inmutables
> Valores asociados pueden ser de cualquier tipo
> La clave se usa para acceder al valor asociado
> Los pares clave-valor pueden ser modificadosm añadidos y eliminados
> Mutables

{Clave: Valor}

{"A": 45, "B": 30}

### Acceder a un valor

diccionario[clave]

edades = {"Gino": 15, "Nora": 45}

edades["Gino"] #15
edades.get("Gino") #15

### Añadir o modificar

diccionario[clave] = el_nuevo_valor

edades["Talina"] = 67

### Eliminar

del diccionario[clave]

del edades["Gino"]

### Revisar si existe 

elemento in diccionario 
(La clave)

"Gino" in edades #true

### Estructura de control - Ciclos repetitivos

#### For
> Estructura de control que permite ejecutar una o varias líneas de código mútiples veces. 
> Lo usamos cuando sabemos con antelación cuantas veces debemos repetir ciertas instrucciones.


___________________________________

for variable in range(inicio, fin):
	#Código

> - Variable de control que puede ser utilizada en el código que se va a repetir
> - Se actualiza automáticamente antes de cada iteración
> - Debe tener un nombre descriptivo.
> - Se pueden iterar: Cadena de caracteres, listas, tuplas, diccinarios, etc.

for variable in iterable: 
	#Código

[img wpp]

Ejemplos: 

Listas:

for num in [1, 2, 3]:
	print(num)

Tuplas:

for num in (1,2,3):
	print(num)

Diccionario:

letras = {"a": 1, "b": 2}

for clave in letras:
	print(clave)

for valor in letra.values():
	print(valor)

for clave,valor in letras.items():
	print(clave, valor)

Rango:

for i in range(4):
	print(i)

# Resultado
# 0 1 2 3 



#### range(): secuencia de enteros
      fin
range(4) >> 0, 1, 2, 3
     fin-1

range(start, stop[, step]

start: El valor del parámetro start (0 si no se utiliza el parámetro)

stop: El valor del parámetro stop

step: El valor del parámetro step (1 si no se utiliza el parámetro) (uno en uno salta)

## Ciclo While

> - Ciclo que continúa mientras una condición es verdadera y se detiene cuando es falsa.
> - No tiene un número fijo o predeterminado de iteraciones.
> - Se ejecuta hasta que lacondición sea falsa.
> - Los ciclos while no actualizan las variables de control automáticamente. Deben ser actualizadas en el cuerpo del ciclo.

while condición:
	#Código

x = 20

while x < 35:
	print(x)
	x += 3

## Funciones

> - Bloque de código reutilizable que realiza una sola tarea específica
> - Ventajas: Reusable - Consiso - Leíble  - Mantenible  - Comprobable
> Puede contener Parámetros: Variable que se incluye en la definición de la función para representar y guardar un valor que podemos pasar cuando llamemos a la función.
> - Argumento: Valor que asignamos a un parámetro cuando llamamos a una función.
> - Return: retornar un valor luego de complear la tarea. Cuando se ejecuta return, la ejecución de la función se detiene inmediatamente. Si no hay return, se retorna "none".
> Scope: Alcance que tendra la variable en el programa. Determina a que variables se tiene acceso en cada parte del programa. 
Variables: 
	Global: Variables que se definieron a alcance de todo el programa. Se puede utilizar en cualquier momento del programa.
	Local: Variables que se definieron en una función y solo se pueden utilizar en esa función.

def función(): 
	#Código

def función(parámetro):
	#Código

def función(parámetro_1, parámetro_2):
	#Código

def función(parámetro):
	#Código
	return valor

Ejemplo: 

def mostrar_mensaje():
	print("Hola")

def mostrar_doble(num):
	print(num * 2)

def sumar(x, y):
	print(x + y)

def sumar(x, y):
	return(x + y)

## Recursión: Definir algo en términos de sí mismo. 

https://www.youtube.com/watch?v=DLikpfc64cA&t=12928s
3:30:10

Caso base
Caso recursivo

def factorial(n):
	if n== 0 or n==1:
		return 1
	else:
		return n * factorial(n-1)

## Trabajar con Archivos

> Sentencia WITH: Permite abrir un achivo y luego cerrarlo automaticamente.

Modos de apertura de archivos:
- r (read - leer)
- w (write - escribir)
- a (append - añadir)
- Agregar un + incliye leer. Por ejemplo, w+ es leer y escribir. 

### Leer archivo

with open("nombre_archvo.txt", "r") as archivo: 
	#Trabajar con el archivo

with open("frases_famosas.txt", "r") as archivo:
	for linea in archivo:
		print("==Frase==")
		print(linea)

### Modificar archivo

#### Reemplazar contenido

notas = {
	"Nora": 87,
	"Gino": 100,
	"Loretto": 67 
}

with open("data_estudiantes.txt", 'w') as archivo: 
	for nombre, nota in notas.items():
		archivo.write(nombre + "-" + str(nota) + "\n")


#### Añadir contenido

notas = {
	"Karen": 7,
	"Juliana": 30,
	"Camila": 74 
}

with open("data_estudiantes.txt", 'a') as archivo: 
	for nombre, nota in notas.items():
		archivo.write(nombre + "-" + str(nota) + "\n")

## Importaciones

import módulo

modulo.funcion(argumento)

modulo.constante

import modulo as nombre_alternativo_que_quiero

from modulo import elemento
from math import pow

No recomendado:
from modulo import *

Ejemplo: 

import math

math.pow(9, 2)

math.pi

## Excepciones

try: 
	# Intenta ejecutar este código
except: 
	# Si ocurre una excepción, se detiene e inmediatamente ejecuta este código

num1 = int(input("Ingresar num: "))
num2 = int(input("Ingresar num: "))

try: 
	resultado = num1 / num2
	print(num1)
except:
	print("Alerta error")

